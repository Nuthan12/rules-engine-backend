package com.rulesengine.model.entities;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.mapping.Document;

import java.util.List;
import java.util.Map;
import java.util.Set;

@Document(collection = "rules")
@Data
@AllArgsConstructor
@NoArgsConstructor
public class Rule {

    /**
     * The unique identifier for the rule in our MongoDB database.
     */
    @Id
    private String id;

    /**
     * Corresponds to the 'Rule ID' column in your original RuleSheet.csv.
     * We keep this for historical reference and easier migration.
     */
    private String legacyRuleId;

    /**
     * The context this rule belongs to, e.g., "cart_amendment", "order_creation".
     * This is a new, crucial field for handling different request types.
     */
    private String namespace;

    /**
     * A unique, machine-friendly name for the rule, generated by the system.
     * e.g., "ShippingContactEmailMandatory"
     */
    private String ruleName;

    /**
     * The human-readable description of the rule, taken from the original Excel.
     * e.g., "Create/Edit - Shipping Address- Shipping Contact Email - Mandatory"
     */
    private String description;

    /**
     * Corresponds to the 'Feature' column, used for grouping rules in the UI.
     * e.g., "Create/Edit Shipping Address"
     */
    private String feature;

    /**
     * The current lifecycle status of the rule.
     * Can be "STAGED", "DEPLOYED", or "ARCHIVED".
     */
    private String status;

    /**
     * The execution priority of the rule (higher numbers execute first).
     * Corresponds to Drools "salience".
     */
    private int priority = 5;

    /**
     * A flexible replacement for the 'Region' column.
     * Can hold values like "EMEA", "APAC", or other concepts like "B2B_Customer".
     */
    private Set<String> tags;

    /**
     * A list of all conditions that must be true for this rule to fire.
     * This represents the "IF" part of the rule.
     */
    private List<Condition> conditions;

    /**
     * A list of all actions to take if the conditions are met.
     * This represents the "THEN" part of the rule.
     */
    private List<Action> actions;

    /**
     * Represents a single condition within a rule.
     */
    @Data
    public static class Condition {
        /**
         * The field to check, using dot-notation for nested objects.
         * Corresponds to 'Target Field' + 'Sub Field'. e.g., "shippingContact.email".
         */
        private String field;

        /**
         * The logical operator to apply.
         * Corresponds to the 'Condition' column. e.g., "isBlank", "containsAnyOf", "minLength".
         */
        private String operator;

        /**
         * The value to check against. Can be a string, number, or list of strings.
         * Corresponds to 'Value 1', 'Value 2', etc. e.g., "TBC" or ["receiving", "finance"].
         */
        private Object value;
    }

    /**
     * Represents a single action to be taken by a rule.
     */
    @Data
    public static class Action {
        /**
         * The type of action to perform.
         * e.g., "VALIDATION_ERROR", "FLAG_FOR_REVIEW".
         */
        private String type;

        /**
         * A map of parameters for the action.
         * e.g., {"errorCode": "SC08", "errorMessage": "Please enter a valid email..."}
         */
        private Map<String, Object> params;
    }
}
